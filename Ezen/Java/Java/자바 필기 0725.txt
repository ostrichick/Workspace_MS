  Day 1
객체지향 프로그램 특성 상속성, 다형성, 캡슐화

객체(현실객체) -> 객체모델링, 추상화 -> SW객체

속성                 ->               변수 (클래스: 객체생성을 위한 틀, 설계도, 프레임)
동작행위              ->              메소드

프로그램 생성주기 Software development life cycle
요구사항 분석 - 요구사랑 정의 명세
설계
구현
테스트 및 배포
유지보수

  클래스 - 객체 생성을 위한 설계도
  -멤버변수 : 스태틱/정적/클래스변수 - JVM 내 메쏘드 영역 - 하나만 존재 - 가장 오래 메모리에 존재
            vs 인스턴스 멤버변수 - JVM내 힙 영역 - 객체별로 존재
    1. 접근지정자(제한자) : private, protected, (default), public
    2. 수정자 : static, final, transient
    3. 데이터형 
      - 기본(primitive) - byte short int long double float boolean char
      - 참조(reference) - 배열 클래스 인터페이스 enum
    4. 변수이름 - 식별자 identifier
  -생성자
  -메소드

  객체 - 일반적인 의미 - 실제세계에 존재하는 모든것
      - 클래스를 통해서 JVM의 메모리상(힙영역)에 만들어진 실체, 인스턴스 

  Day 2
Getter, Setter - 은닉화, 캡슐화. 메소드를 통해 잘못된 값이 들어가는것을 미리 방지할 수 있음

메소드 - 다른 프로그래밍 언어에서의 함수. 선언부 + 처리문.
     1. 접근지정자 : private, protected, (default), public
     2. 수정자 : static, final, abstract, 
      - 스태틱메소드 - 클래스이름.메소드() 호출 가능.
      - 인스턴스 메소드

     3. 반환형 - 메소드 실행 결과값에 대한 반환 데이터형 return datatype
              - void : 반환값이 없는 메소드 (return은 보통 생략함)
     4. 메소드이름
     5. (매개변수 데이터형 매개변수 명) parameter
     6. {처리문}

메소드 구분 기호 (signature)
  - 메소드 이름
  - 매개변수 (데이터형, 개수, 순서) - 오버로딩을 통해 다형성
    
this - reference variable. 객체 자기 자신의 참조값, 주소를 가지고 있음
this() - 생성자 this. 클래스 내에 정의된 다른 생성자 호출시 사용

  Day 3
생성자 - 객체의 멤버 변수를 초기화시켜주는 메소드. 반환형이 없음
  - 멤버 변수의 초기화 
    1. 기본값 
    2. 명시적초기화 
    3. 블록 (인스턴스 or 스태틱)
    4. 생성자에 의한 초기화

클래스들간의 관계
  - 상속 - 다형성,캡슐화,
    - 계층을 형성 super상위계층-sub하위계층 
      - 클래스-클래스 일반화 관계
      - 인터페이스-클래스 실체화/구체화 단계
    - 코드의 재활용성 - 코드의 중복을 줄임
    - 단일상속만 가능
  - 자식 클래스 객체 생성 순서
    1. 자식 클래스 생성자 호출
    2. 부모 클래스 생성자 호출 super(); <- 이것때문에 매개변수없는 기본생성자 만들어둬야함
    3. 부모 클래스 객체 생성
    4. 자식 클래스 객체 생성

bsil 1248
boolean false
char \u0000
double
float

  Day 4
 abstract class - 접근 지정자, 수정자(abstract), 클래스이름 { }
    - new 연산자 이용한 객체생성 불가능 (미완성 클래스)
    - 추상메소드를 하나라도 가진 클래스는 모두 추상클래스로 정의해야함
    abstract method - 접근 지정자, 수정자, 반환형, 메소드이름(매개변수); 끝. { }로 이루어진 내용이 없음
        - 특징: 강제성. 상속한 클래스는 반드시 overriding 재정의해야함. 아니면 다시 상속시켜야함

  interface - 접근 지정자, interface 인터페이스 이름 { }
    - 연결매체, GUI, API
    - 클래스가 아님. (new 연산자 이용한 객체 생성 불가능)
    - JDK8이전: 상수, 추상메소드(강제성 있음)
    - (public static final) 상수
    - (public abstract) 추상메소드
    - JDK8이후: default 메소드, static 메소드 추가 - 강제성 없음
    - 클래스 정의 명세서 (이걸 상속해갔으면 이렇게 사용하시오)
    - 클래스들을 묶어주는 역할
    - 다중 상속 가능
    - 상속관계에서 다형성의 예
      - 메소드 오버라이딩 @Override 어노테이션
      - 레퍼런스 형변환
        - 기준: 계층
          - 하위계층->상위계층으로 변환 : 업캐스팅, 자동형변환, 하지만 상위 계층에서 정의한 것만 접근 가능 (참조영역 축소, 원상복귀)
            - 메소드를 재정의하면 상위계층의 메소드는 숨겨지고 호출되지 않음
          - 상위계층->하위계층으로 변환 : 다운캐스팅, 강제형변환, 

  예외처리 exception handling
    - 예외: 프로그램 실행 중 발생하는 예기치 않은 상황
    - 목적: 비정상 종료 방지
    - 방법: 1. try-catch : 직접처리
            2. throws : 미루기, 떠넘기기. (호출한 곳으로)
    - 외부자원을 사용할 경우: try-with-resource 외부 자원 객체에 대한 해제 작업 close() 메소드

    예외 발생시키기 throw 문 - throw 예외 객체
    throw JuminException() 

    사용자 정의 예외
    Exception 클래스 상속
    예외 관련 설명글 public JuminException(){super("주민번호 오류 예외");}


  Day 5
컬렉션 프레임워크 
  - 자료구조를 쉽게 이용할 수 있도록 지원해주는 자바 API
  - 데이터를 효율적으로 저장하고 관리할 수 있는 방법
            구조     인덱스  중복허용
     List   배열       O       O        ArrayList, Vector
     Set    집합       X       X        HashSet,
     Map Key 와 value 유일     O (tuple, dictionary) HashMap, 

    배열 - 크기 고정, 데이터형 하나만 가능

    Iterator<데이터타입> iterator명 = 컬렉션.iterator();
    while(iterator명.hasNext()) {
      iterator.next();}

    제네릭 Generic
      - JDK 5부터
      - 컴파일시 데이터형 체크
      - 데이터 형변환 제거
      * 컬렉션 사용시 적용 ArrayList<String> arrayList = new ArrayList<String>();

      클래스이름<타입파라미터> {  }
                - 데이터형 매개변수, 대문자 T(ype), E(lement), K 등

      <타입파라미터 extends 상위 데이터형> - 상위 데이터형의 하위 클래스만 사용 가능

      와일드 카드 데이터형?
      <?> 모든 데이터형 (클래스/인터페이스)
      <? extends 상위타입> 상위 데이터형 제한
      <? super 하위타입> 하위 데이터형 제한


  IO 입출력
  InputStream 객체는 추상클래스라 new 명령어로 인스턴스화 불가능
    System.in 명령어를 통해 만들수 있음
    InputStream = System.in; 키보드를 통해 데이터 입력 받을 수 있음
  OutputStream 객체 
    System.out 으로 출력객체 얻을 수 있음

  보조입력 클래스 Filter클래스 기능추가, 단독 사용 불가능
    1. 버퍼기능 Buffered- new 생성명령어 사용 가능
      1) 바이트 BufferedInputStream, OutputStream
      2) 문자 : BufferedReader, Writer

    2. 기본데이터형 입출력 Data-
      DataInputStream, DataOutputStream

    3. 객체 입출력 (바이트 단위) Object-
      ObjectInputStream, ObjectOutputStream

    4. 파일 입출력 
      1) 바이트: FileInputStream("파일명" or 파일객체);
      2) 문자 : FileReader("파일명" or 파일객체);
      
      입력은 반드시 정확한 경로명 파일명이 필요하지만 출력 파일명은 자동생성 가능함
    출력에 유용한 출력 클래스 PrintWriter - write(), print() 메소드 지원, autoFlush 기능 지원
    입력에 유용한 유틸 클래스 Scanner 



  JSP
  <%! %> 선언문
  <% %> 스크립틀릿
  <%= %> 표현식

  JSTL
  <%@ %> 지시자

  Tomcat = WAS, 웹컨테이너
    웹서버
      - session
      - request
      - response


  DI 의존성주입 = 클래스에서 직접 객체를 만드는게 아니라 객체를 만들어서 스프링 컨테이너의 Bean으로 저장했다가 필요할때 주입

  객체 등록 방법
    1. XML 파일
    2. 애노테이션
    3. @ComponentScan 기능을 이용한 자동 등록

  주입 받는 법
    1. Autowired
    2. 생성자
    3. Setter
    4. 필드 (편하지만 비권장)
